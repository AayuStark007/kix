// Grammar reference for Kix (just for ref, not used to generate anything)

// First, we define some terms:
Literal:           Number, Strings, Booleans and nil
Unary Expression:  Prefix ! to perform logical not, and - to negate a number
Binary Expression: Infix arithmetic (+, -, *, /) and logic (==, !=, <, <=, >, >=)
Parenthesis:       Pair of ( and ) wrapped around an expression

// Now, the grammar production rules

// Program
program         -> declaration* EOF ;

declaration     -> funDecl
                 | varDecl
                 | statement ;

// Declarations
funDecl         -> "fun" function ;
function        -> IDENTIFIER "(" parameters? ")" block ;
parameters      -> IDENTIFIER ( "," IDENTIFIER )* ;

varDecl         -> "var" IDENTIFIER ( "=" expression )? ;

statement       -> exprStmt
                 | forStmt
                 | ifStmt
                 | printStmt
                 | whileStmt
                 | blockStmt ;

// Statements
exprStmt        -> expression ;

forStmt         -> "for" "(" (varDecl | exprStmt | ";")
                   expression? ";"
                   expression? ")" statement ;

ifStmt          -> "if" "(" expression ")" statement
                   ("else" statement )? ;

printStmt       -> "print" expression ;

whileStmt       -> "while" "(" expression ")" statement ;

blockStmt       -> "{" declaration* "}" ;


// Expression
expression      -> assignment ;
assignment      -> IDENTIFIER "=" assignment
                 | ternary ;

ternary         -> logic_or ( "?" expression ":" expression )* ;

logic_or        -> logic_and ( "or" logic_and )* ;
logic_and       -> equality ( "and" equality )* ;


// precedence rules
equality        -> comparison ( ( "!=" | "==" ) comparison )* ;

comparison      -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;

term            -> factor ( ( "-" | "+" ) factor )* ;

factor          -> unary ( ( "/" | "*" ) unary )* ;

unary           -> ( "!" | "-" ) unary
                 | primary ;

call            -> primary ( "(" arguments? ")" )* ;

arguments       -> expression ( "," expression )* ;

primary         -> "true" | "false" | "nil"
                 | NUMBER | STRING
                 | "(" expression ")"
                 | IDENTIFIER ;
