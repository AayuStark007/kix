// Grammar reference for Kix (just for ref, not used to generate anything)

// First, we define some terms:
Literal:           Number, Strings, Booleans and nil
Unary Expression:  Prefix ! to perform logical not, and - to negate a number
Binary Expression: Infix arithmetic (+, -, *, /) and logic (==, !=, <, <=, >, >=)
Parenthesis:       Pair of ( and ) wrapped around an expression

// Now, the grammar production rules

// Statement
program         -> statement* EOF ;

statement       -> exprStmt
                 | printStmt ;

exprStmt        -> expression ";" ;

printStmt       -> "print" expression ";" ;

// Expression
expression      -> block

// precedence rules
block           -> equality ( "," equality )* ;

// TODO: think about this
conditional     -> equality ? expression : expression ;

equality        -> comparison ( ( "!=" | "==" ) comparison )* ;

comparison      -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;

term            -> factor ( ( "-" | "+" ) factor )* ;

factor          -> unary ( ( "/" | "*" ) unary )* ;

unary           -> ( "!" | "-" ) unary
                 | primary ;

primary         -> NUMBER | STRING | "true" | "false" | "nil"
                 | "(" expression ")" ;
